/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[22,23,25,26,27,28,29,30,31,32,35,36,40,41,42,44,45,47,48,50,51,53,56,70,73,75,76,77,78,79,81,82,83,99],$V2=[23,25,26,27,28,29,30,31,32,35,36,40,41,42,44,45,47,48,50,51,53,56,70,73,75,76,77,78,79,81,82,83,99],$V3=[25,26,27,28,29,30,31,32,35,36,40,41,42,44,45,47,48,50,51,53,56,70,73,75,76,77,78,79,81,82,83,99],$V4=[25,27,28,29,30,31,32,35,36,40,41,42,44,45,47,48,50,51,53,56,70,73,75,76,77,78,79,81,82,83,99],$V5=[25,28,29,30,31,32,35,36,40,41,42,44,45,47,48,50,51,53,56,70,73,75,76,77,78,79,81,82,83,99],$V6=[25,29,30,31,32,35,36,40,41,42,44,45,47,48,50,51,53,56,70,73,75,76,77,78,79,81,82,83,99],$V7=[25,30,31,32,35,36,40,41,42,44,45,47,48,50,51,53,56,70,73,75,76,77,78,79,81,82,83,99],$V8=[25,32,35,36,40,41,42,44,45,47,48,50,51,53,56,70,73,75,76,77,78,79,81,82,83,99],$V9=[25,35,36,40,41,42,44,45,47,48,50,51,53,56,70,73,75,76,77,78,79,81,82,83,99],$Va=[1,65],$Vb=[1,32],$Vc=[1,33],$Vd=[1,55],$Ve=[1,38],$Vf=[1,39],$Vg=[1,63],$Vh=[1,64],$Vi=[1,66],$Vj=[1,67],$Vk=[1,68],$Vl=[1,69],$Vm=[1,70],$Vn=[1,46],$Vo=[1,62],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,61],$Vv=[1,47],$Vw=[1,48],$Vx=[1,49],$Vy=[1,36],$Vz=[5,6,58],$VA=[5,6,33,58,157],$VB=[1,78],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,79],$VG=[5,6,26,33,39,40,58,65,66,68,71,84,105,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],$VH=[1,84],$VI=[1,85],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[1,90],$VO=[5,6,24,26,33,39,40,58,65,66,68,71,84,105,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],$VP=[1,97],$VQ=[1,98],$VR=[1,96],$VS=[2,103],$VT=[1,111],$VU=[1,109],$VV=[1,110],$VW=[1,119],$VX=[1,105],$VY=[1,106],$VZ=[1,107],$V_=[1,108],$V$=[1,112],$V01=[1,113],$V11=[1,114],$V21=[1,115],$V31=[1,116],$V41=[1,117],$V51=[5,6,24,26,33,35,39,40,58,65,66,68,71,73,75,84,86,88,89,90,91,92,93,94,95,96,97,99,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],$V61=[5,6,24,26,33,35,39,40,58,65,66,68,71,73,75,84,86,88,89,90,91,92,93,94,95,96,97,99,101,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],$V71=[1,120],$V81=[1,127],$V91=[2,55],$Va1=[1,128],$Vb1=[1,145],$Vc1=[1,141],$Vd1=[1,159],$Ve1=[1,157],$Vf1=[1,158],$Vg1=[1,160],$Vh1=[19,25,40,41,42,44,45,47,48,50,51,53,56,70,73,75,76,77,78,79,81,82,83,117],$Vi1=[1,192],$Vj1=[33,58],$Vk1=[2,50],$Vl1=[1,201],$Vm1=[1,199],$Vn1=[1,200],$Vo1=[2,206],$Vp1=[1,206],$Vq1=[1,207],$Vr1=[5,6,33,58,127,133,137,143,145,150,152,154,182],$Vs1=[1,209],$Vt1=[1,212],$Vu1=[1,213],$Vv1=[1,214],$Vw1=[1,215],$Vx1=[2,183],$Vy1=[1,211],$Vz1=[5,6,26,33,58,84,127,133,137,143,145,150,152,154,164,165,167,168,173,177,179,180,182],$VA1=[5,6,26,33,39,40,58,65,66,68,71,84,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],$VB1=[5,6,24,26,33,39,40,58,65,66,68,71,84,88,89,90,91,96,99,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],$VC1=[5,6,24,26,33,39,40,58,65,66,68,71,73,75,84,88,89,90,91,96,99,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],$VD1=[5,6,24,26,33,35,39,40,58,65,66,68,71,73,75,84,88,89,90,91,92,93,94,95,96,99,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],$VE1=[5,6,58,133,137,143,145,150,152,154],$VF1=[1,254],$VG1=[2,188],$VH1=[170,173],$VI1=[5,6,26,33,58,84,127,133,137,143,145,150,152,154,164,165,167,168,173,177,179,180,182,192,193,194],$VJ1=[2,208],$VK1=[1,259],$VL1=[5,6,58,137,143,145,150,152,154],$VM1=[1,286],$VN1=[1,294],$VO1=[1,295],$VP1=[1,296],$VQ1=[5,6,58,137,145,150,152,154],$VR1=[1,319],$VS1=[1,325],$VT1=[1,326],$VU1=[65,68,71],$VV1=[5,6,58,145,150,152,154],$VW1=[2,152],$VX1=[1,335],$VY1=[1,336],$VZ1=[5,6,33,58,131,137,143,145,150,152,154],$V_1=[2,213],$V$1=[1,345],$V02=[56,152],$V12=[5,6,58,150,152,154],$V22=[5,6,58,152,154],$V32=[1,368];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,";":6,"SELECT":7,"distinctOpt":8,"highPriorityOpt":9,"maxStateMentTimeOpt":10,"straightJoinOpt":11,"sqlSmallResultOpt":12,"sqlBigResultOpt":13,"sqlBufferResultOpt":14,"sqlCacheOpt":15,"sqlCalcFoundRowsOpt":16,"selectExprList":17,"selectDataSetOpt":18,"ALL":19,"DISTINCT":20,"DISTINCTROW":21,"HIGH_PRIORITY":22,"MAX_STATEMENT_TIME":23,"=":24,"NUMERIC":25,"STRAIGHT_JOIN":26,"SQL_SMALL_RESULT":27,"SQL_BIG_RESULT":28,"SQL_BUFFER_RESULT":29,"SQL_CACHE":30,"SQL_NO_CACHE":31,"SQL_CALC_FOUND_ROWS":32,",":33,"selectExpr":34,"*":35,"SELECT_EXPR_STAR":36,"expr":37,"selectExprAliasOpt":38,"AS":39,"IDENTIFIER":40,"DATE":41,"TIMESTAMP":42,"string":43,"QUOTED_IDENTIFIER":44,"STRING":45,"number":46,"EXPONENT_NUMERIC":47,"HEX_NUMERIC":48,"boolean":49,"TRUE":50,"FALSE":51,"null":52,"NULL":53,"literal":54,"function_call":55,"(":56,"function_call_param_list":57,")":58,"function_call_param":59,"identifier":60,"DOT":61,"identifier_list":62,"case_expr_opt":63,"when_then_list":64,"WHEN":65,"THEN":66,"case_when_else":67,"ELSE":68,"case_when":69,"CASE":70,"END":71,"simple_expr_prefix":72,"+":73,"simple_expr":74,"-":75,"~":76,"!":77,"BINARY":78,"INTERVAL":79,"expr_list":80,"ROW":81,"EXISTS":82,"{":83,"}":84,"at_time_zone_opt":85,"AT_TIME_ZONE":86,"bit_expr":87,"|":88,"&":89,"<<":90,">>":91,"/":92,"DIV":93,"MOD":94,"%":95,"^":96,"::":97,"not_opt":98,"NOT":99,"escape_opt":100,"ESCAPE":101,"predicate":102,"IN":103,"BETWEEN":104,"AND":105,"SOUNDS":106,"LIKE":107,"REGEXP":108,"comparison_operator":109,">=":110,">":111,"<=":112,"<":113,"<>":114,"!=":115,"sub_query_data_set_opt":116,"ANY":117,"boolean_primary":118,"IS":119,"boolean_extra":120,"UNKNOWN":121,"&&":122,"||":123,"OR":124,"XOR":125,"where_opt":126,"WHERE":127,"group_by_opt":128,"group_by":129,"roll_up_opt":130,"WITH":131,"ROLLUP":132,"GROUP_BY":133,"group_by_order_by_item_list":134,"order_by_opt":135,"order_by":136,"ORDER_BY":137,"group_by_order_by_item":138,"sort_opt":139,"ASC":140,"DESC":141,"having_opt":142,"HAVING":143,"limit":144,"LIMIT":145,"OFFSET":146,"limit_opt":147,"procedure_opt":148,"procedure":149,"PROCEDURE":150,"for_update_lock_in_share_mode_opt":151,"FOR":152,"UPDATE":153,"LOCK":154,"SHARE":155,"MODE":156,"FROM":157,"table_refrences":158,"partitionOpt":159,"escaped_table_reference":160,"table_reference":161,"OJ":162,"join_inner_cross":163,"INNER":164,"CROSS":165,"left_right":166,"LEFT":167,"RIGHT":168,"out_opt":169,"OUTER":170,"left_right_out_opt":171,"join_table":172,"JOIN":173,"table_factor":174,"join_condition":175,"on_join_condition":176,"NATURAL":177,"join_condition_opt":178,"ON":179,"USING":180,"partition_names":181,"PARTITION":182,"aliasOpt":183,"index_or_key":184,"INDEX":185,"KEY":186,"for_opt":187,"identifier_list_opt":188,"index_hint_list_opt":189,"index_hint_list":190,"index_hint":191,"USE":192,"IGNORE":193,"FORCE":194,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:";",7:"SELECT",19:"ALL",20:"DISTINCT",21:"DISTINCTROW",22:"HIGH_PRIORITY",23:"MAX_STATEMENT_TIME",24:"=",25:"NUMERIC",26:"STRAIGHT_JOIN",27:"SQL_SMALL_RESULT",28:"SQL_BIG_RESULT",29:"SQL_BUFFER_RESULT",30:"SQL_CACHE",31:"SQL_NO_CACHE",32:"SQL_CALC_FOUND_ROWS",33:",",35:"*",36:"SELECT_EXPR_STAR",39:"AS",40:"IDENTIFIER",41:"DATE",42:"TIMESTAMP",44:"QUOTED_IDENTIFIER",45:"STRING",47:"EXPONENT_NUMERIC",48:"HEX_NUMERIC",50:"TRUE",51:"FALSE",53:"NULL",56:"(",58:")",61:"DOT",65:"WHEN",66:"THEN",68:"ELSE",70:"CASE",71:"END",73:"+",75:"-",76:"~",77:"!",78:"BINARY",79:"INTERVAL",81:"ROW",82:"EXISTS",83:"{",84:"}",86:"AT_TIME_ZONE",88:"|",89:"&",90:"<<",91:">>",92:"/",93:"DIV",94:"MOD",95:"%",96:"^",97:"::",99:"NOT",101:"ESCAPE",103:"IN",104:"BETWEEN",105:"AND",106:"SOUNDS",107:"LIKE",108:"REGEXP",110:">=",111:">",112:"<=",113:"<",114:"<>",115:"!=",117:"ANY",119:"IS",121:"UNKNOWN",122:"&&",123:"||",124:"OR",125:"XOR",127:"WHERE",131:"WITH",132:"ROLLUP",133:"GROUP_BY",137:"ORDER_BY",140:"ASC",141:"DESC",143:"HAVING",145:"LIMIT",146:"OFFSET",150:"PROCEDURE",152:"FOR",153:"UPDATE",154:"LOCK",155:"SHARE",156:"MODE",157:"FROM",162:"OJ",164:"INNER",165:"CROSS",167:"LEFT",168:"RIGHT",170:"OUTER",173:"JOIN",177:"NATURAL",179:"ON",180:"USING",182:"PARTITION",185:"INDEX",186:"KEY",192:"USE",193:"IGNORE",194:"FORCE"},
productions_: [0,[3,2],[3,3],[4,12],[8,1],[8,1],[8,1],[8,0],[9,1],[9,0],[10,3],[10,0],[11,1],[11,0],[12,1],[12,0],[13,1],[13,0],[14,1],[14,0],[15,0],[15,1],[15,1],[16,1],[16,0],[17,3],[17,1],[34,1],[34,1],[34,2],[38,0],[38,2],[38,2],[38,2],[38,1],[43,1],[43,1],[46,1],[46,1],[46,1],[49,1],[49,1],[52,1],[54,1],[54,1],[54,1],[54,1],[55,4],[57,3],[57,1],[59,0],[59,1],[59,1],[59,2],[59,1],[60,1],[60,3],[62,1],[62,3],[63,0],[63,1],[64,4],[64,5],[67,0],[67,2],[69,5],[72,2],[72,2],[72,2],[72,2],[72,2],[72,2],[72,2],[72,2],[74,1],[74,1],[74,1],[74,1],[74,3],[74,4],[74,3],[74,4],[74,4],[74,1],[85,0],[85,2],[87,1],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,2],[98,0],[98,1],[100,0],[100,2],[102,1],[102,6],[102,6],[102,6],[102,6],[102,6],[102,4],[102,5],[102,4],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[116,1],[116,1],[118,1],[118,4],[118,4],[118,3],[118,6],[118,4],[118,3],[118,6],[118,4],[118,3],[118,6],[120,1],[120,1],[37,1],[37,4],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[80,1],[80,3],[126,0],[126,2],[128,0],[128,1],[130,0],[130,2],[129,3],[135,0],[135,1],[136,3],[134,1],[134,3],[138,2],[139,0],[139,1],[139,1],[142,0],[142,2],[144,2],[144,4],[144,4],[147,0],[147,1],[148,0],[148,1],[149,2],[151,0],[151,2],[151,4],[18,0],[18,10],[158,1],[158,3],[160,1],[160,4],[163,0],[163,1],[163,1],[166,1],[166,1],[169,0],[169,1],[171,0],[171,2],[172,4],[172,5],[172,4],[172,6],[172,5],[178,0],[178,1],[176,2],[175,1],[175,4],[161,1],[161,1],[181,1],[181,3],[159,0],[159,4],[183,0],[183,2],[183,1],[184,1],[184,1],[187,0],[187,2],[187,2],[187,2],[188,0],[188,1],[189,0],[189,1],[190,1],[190,3],[191,6],[191,6],[191,6],[174,4],[174,4],[174,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2:
 return {nodeType: 'Main', value: $$[$0-2]}; 
break;
case 3:

        this.$ = {
          type: 'Select',
          distinctOpt: $$[$0-10],
          highPriorityOpt: $$[$0-9],
          maxStateMentTimeOpt: $$[$0-8],
          straightJoinOpt: $$[$0-7],
          sqlSmallResultOpt: $$[$0-6],
          sqlBigResultOpt: $$[$0-5],
          sqlBufferResultOpt: $$[$0-4],
          sqlCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectItems: $$[$0-1],
          from: $$[$0].from,
          partition: $$[$0].partition,
          where: $$[$0].where,
          groupBy: $$[$0].groupBy,
          having: $$[$0].having,
          orderBy: $$[$0].orderBy,
          limit: $$[$0].limit,
          procedure: $$[$0].procedure,
          updateLockMode: $$[$0].updateLockMode
        }
      
break;
case 4: case 5: case 6: case 8: case 10: case 12: case 14: case 16: case 18: case 21: case 22: case 23: case 43: case 44: case 45: case 46: case 51: case 52: case 54: case 60: case 64: case 74: case 75: case 76: case 77: case 83: case 85: case 86: case 104: case 106: case 107: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 136: case 138: case 149: case 151: case 156: case 162: case 163: case 165: case 170: case 172: case 173: case 184: case 185: case 186: case 187: case 189: case 198: case 200: case 202: case 203: case 211: case 212: case 218: case 220:
 this.$ = $$[$0] 
break;
case 7: case 9: case 11: case 13: case 15: case 17: case 19: case 20: case 24: case 50: case 59: case 63: case 84: case 103: case 105: case 148: case 150: case 152: case 155: case 161: case 164: case 169: case 171: case 174: case 183: case 188: case 197: case 206: case 213: case 217: case 219:
 this.$ = null 
break;
case 25:
 $$[$0-2].value.push($$[$0]); 
break;
case 26:
 this.$ = { type: 'SelectExpr', value: [ $$[$0] ] } 
break;
case 27: case 28: case 55:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 29:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 30: case 208:
 this.$ = {alias: null, hasAs: null} 
break;
case 31: case 32: case 33:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 34:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 35: case 36:
 this.$ = { type: 'String', value: $$[$0] } 
break;
case 37: case 38: case 39:
 this.$ = { type: 'Number', value: $$[$0] } 
break;
case 40:
 this.$ = { type: 'Boolean', value: 'TRUE' } 
break;
case 41:
 this.$ = { type: 'Boolean', value: 'FALSE' } 
break;
case 42:
 this.$ = { type: 'Null', value: 'null' } 
break;
case 47:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 48:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 49:
 this.$ = [$$[$0]]; 
break;
case 53:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 56:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 57:
 this.$ = { type: 'IdentifierList', value: [ $$[$0] ] } 
break;
case 58: case 180:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 61:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; 
break;
case 62:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 65:
 this.$ = { type: 'CaseWhen', caseExprOpt: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 66: case 67: case 68: case 69: case 70:
 this.$ = { type: 'Prefix', prefix: $$[$0-1], value: $$[$0] } 
break;
case 71: case 72:
 this.$ = { type: 'Cast', value: $$[$0], toType: $$[$0-1] } 
break;
case 73:
 this.$ = { type: 'Interval', value: $$[$0] } 
break;
case 78:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-1] } 
break;
case 79:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-2], hasRow: true } 
break;
case 80:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 81:
 this.$ = { type: 'SubQuery', value: $$[$0-1], hasExists: true } 
break;
case 82:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 87:
 this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } 
break;
case 88:
 this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } 
break;
case 89:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 90:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 91:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 92:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 93:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 94:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 95:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 96:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 97:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 98:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 99: case 100: case 101:
 this.$ = { type: 'BitExpression', operator: '::', left: $$[$0-2], right: $$[$0] } 
break;
case 102:
 this.$ = { type: 'BitExpression', operator: 'AT_TIME_ZONE', left: $$[$0-1], right: $$[$0] } 
break;
case 108:
 this.$ = { type: 'InSubQueryPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 109:
 this.$ = { type: 'InExpressionListPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: $$[$0-1] } 
break;
case 110: case 111: case 112:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-2], right: $$[$0] } } 
break;
case 113:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 114:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 115:
 this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 126: case 127: case 130: case 133:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 128: case 131: case 134:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 129: case 132: case 135:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 137:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 139:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 140:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 141: case 144:
 this.$ = { type: 'AndExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 142: case 143:
 this.$ = { type: 'OrExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 145:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 146:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 147: case 222:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 153:
 this.$ = true 
break;
case 154:
 this.$ = { type: 'GroupBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 157:
 this.$ = { type: 'OrderBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 158: case 204:
 this.$ = [ $$[$0] ] 
break;
case 159:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 160:
 this.$ = { type: 'GroupByOrderByItem', value: $$[$0-1], sortOpt: $$[$0] } 
break;
case 166:
 this.$ = { type: 'Limit', value: [ $$[$0-1] ] } 
break;
case 167:
 this.$ = { type: 'Limit', value: [ $$[$0-3], $$[$0-1] ] } 
break;
case 168:
 this.$ = { type: 'Limit', value: [ $$[$0-1], $$[$0-3] ], offsetMode: true } 
break;
case 175:
 this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 176:
 this.$ = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0] 
break;
case 177:
 this.$ = {} 
break;
case 178:
 this.$ = { from: $$[$0-8], partition: $$[$0-7], where: $$[$0-6], groupBy: $$[$0-5], having: $$[$0-4], orderBy: $$[$0-3], limit: $$[$0-2], procedure: $$[$0-1], updateLockMode: $$[$0] } 
break;
case 179:
 this.$ = { type: 'TableRefrences', value: [ $$[$0] ] } 
break;
case 181:
 this.$ = { type: 'TableRefrence', value: $$[$0] } 
break;
case 182:
 this.$ = { type: 'TableRefrence', hasOj: true, value: $$[$0-1] } 
break;
case 190:
 this.$ = { leftRight: null, outOpt: null } 
break;
case 191:
 this.$ = { leftRight: $$[$0-1], outOpt: $$[$0] } 
break;
case 192:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-2], left: $$[$0-3], right: $$[$0], condition: null } 
break;
case 193:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } 
break;
case 194:
 this.$ = { type: 'StraightJoinTable', left: $$[$0-3], right: $$[$0-1], condition: $$[$0] } 
break;
case 195:
 this.$ = { type: 'LeftRightJoinTable', leftRight: $$[$0-4], outOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1], condition: $$[$0] } 
break;
case 196:
 this.$ = { type: 'NaturalJoinTable', leftRight: $$[$0-2].leftRight, outOpt: $$[$0-2].outOpt, left: $$[$0-4], right: $$[$0] } 
break;
case 199:
 this.$ = { type: 'OnJoinCondition', value: $$[$0] } 
break;
case 201:
 this.$ = { type: 'UsingJoinCondition', value: $$[$0-1] } 
break;
case 205:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]) 
break;
case 207:
 this.$ = { type: 'Partitions', value: $$[$0-1] } 
break;
case 209:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 210:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 214: case 215: case 216:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 221:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } 
break;
case 223:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 224:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 225:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 226:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs, indexHintOpt: $$[$0] } 
break;
case 227:
 this.$ = { type: 'SubQuery', value: $$[$0-2], alias: $$[$0].alias, hasAs: $$[$0].hasAs } 
break;
case 228:
 this.$ = $$[$0-1]; this.$.hasParentheses = true 
break;
}
},
table: [{3:1,4:2,7:$V0},{1:[3]},{5:[1,4],6:[1,5]},o($V1,[2,7],{8:6,19:[1,7],20:[1,8],21:[1,9]}),{1:[2,1]},{5:[1,10]},o($V2,[2,9],{9:11,22:[1,12]}),o($V1,[2,4]),o($V1,[2,5]),o($V1,[2,6]),{1:[2,2]},o($V3,[2,11],{10:13,23:[1,14]}),o($V2,[2,8]),o($V4,[2,13],{11:15,26:[1,16]}),{24:[1,17]},o($V5,[2,15],{12:18,27:[1,19]}),o($V4,[2,12]),{25:[1,20]},o($V6,[2,17],{13:21,28:[1,22]}),o($V5,[2,14]),o($V3,[2,10]),o($V7,[2,19],{14:23,29:[1,24]}),o($V6,[2,16]),o($V8,[2,20],{15:25,30:[1,26],31:[1,27]}),o($V7,[2,18]),o($V9,[2,24],{16:28,32:[1,29]}),o($V8,[2,21]),o($V8,[2,22]),{17:30,25:$Va,34:31,35:$Vb,36:$Vc,37:34,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o($V9,[2,23]),o($Vz,[2,177],{18:71,33:[1,72],157:[1,73]}),o($VA,[2,26]),o($VA,[2,27]),o($VA,[2,28]),o($VA,[2,30],{38:74,39:[1,80],40:[1,81],105:$VB,122:$VC,123:$VD,124:$VE,125:$VF}),o($VG,[2,138],{109:83,24:$VH,110:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,119:[1,82]}),{25:$Va,37:91,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o($VO,[2,125]),{24:$VH,25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:95,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,98:94,99:$VR,104:$VS,109:93,110:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,119:[1,92]},{24:$VH,25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:102,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,98:101,99:$VR,104:$VS,109:100,110:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN,119:[1,99]},o($VO,[2,107],{98:103,85:118,35:$VT,73:$VU,75:$VV,86:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,99:$VR,103:$VS,104:$VS,107:$VS,108:$VS,106:[1,104]}),o($V51,[2,86]),o($V61,[2,74]),o($V61,[2,75],{61:$V71}),o($V61,[2,76]),o($V61,[2,77]),{4:122,7:$V0,25:$Va,37:123,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:121,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{56:[1,124]},{56:[1,125]},{40:$V81,60:126},o($V61,[2,83]),o($V61,[2,43]),o($V61,[2,44]),o($V61,[2,45]),o($V61,[2,46]),o([5,6,24,26,33,35,39,40,58,61,65,66,68,71,73,75,84,86,88,89,90,91,92,93,94,95,96,97,99,101,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],$V91,{56:$Va1}),{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:129,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:130,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:131,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:132,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:133,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:134,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},{25:$Va,37:136,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,63:135,65:[2,59],69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o($V61,[2,35]),o($V61,[2,36]),o($V61,[2,37]),o($V61,[2,38]),o($V61,[2,39]),o($V61,[2,40]),o($V61,[2,41]),o($V61,[2,42]),o($Vz,[2,3]),{25:$Va,34:137,35:$Vb,36:$Vc,37:34,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{40:$V81,56:$Vb1,60:144,83:$Vc1,158:138,160:139,161:140,172:143,174:142},o($VA,[2,29]),{25:$Va,37:146,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{25:$Va,37:147,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{25:$Va,37:148,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{25:$Va,37:149,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{25:$Va,37:150,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{40:[1,151],41:[1,152],42:[1,153]},o($VA,[2,34]),o([50,51,53,121],$VS,{98:154,99:$VR}),{19:$Vd1,25:$Va,40:$Vd,41:$Ve1,42:$Vf1,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,102:155,116:156,117:$Vg1},o($Vh1,[2,116]),o($Vh1,[2,117]),o($Vh1,[2,118]),o($Vh1,[2,119]),o($Vh1,[2,120]),o($Vh1,[2,121]),o($Vh1,[2,122]),o($VG,[2,140]),{53:$VS,98:161,99:$VR},{19:$Vd1,25:$Va,40:$Vd,41:$Ve1,42:$Vf1,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,102:162,116:163,117:$Vg1},{104:[1,164]},o($V61,[2,71]),o([50,51,53,103,104,107,108,121],[2,104]),{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:95,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:102,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},{53:$VS,98:165,99:$VR},{19:$Vd1,25:$Va,40:$Vd,41:$Ve1,42:$Vf1,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,102:166,116:167,117:$Vg1},{104:[1,168]},o($V61,[2,72]),{103:[1,169],104:[1,170],107:[1,171],108:[1,172]},{107:[1,173]},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:174},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:175},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:176},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:177},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:178},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:179},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:180},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:181},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:182},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:183},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:184},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:185},{40:$V81,41:[1,187],42:[1,188],60:186},o($V51,[2,102]),{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:189,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},{40:[1,190]},{33:$Vi1,58:[1,191]},{58:[1,193]},o($Vj1,[2,146],{105:$VB,122:$VC,123:$VD,124:$VE,125:$VF}),{25:$Va,37:123,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:194,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{4:195,7:$V0},{25:$Va,37:196,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,61:$V71,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o([5,6,24,25,26,33,35,39,40,41,42,44,45,47,48,50,51,53,56,58,61,65,66,68,70,71,73,75,76,77,78,79,81,82,83,84,86,88,89,90,91,92,93,94,95,96,97,99,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182,192,193,194],$V91),o($Vj1,$Vk1,{118:35,102:37,87:40,74:41,54:42,60:43,55:44,72:45,69:50,43:51,46:52,49:53,52:54,57:197,59:198,37:202,20:$Vl1,25:$Va,35:$Vm1,36:$Vn1,40:$Vd,41:$Ve,42:$Vf,44:$Vg,45:$Vh,47:$Vi,48:$Vj,50:$Vk,51:$Vl,53:$Vm,56:$Vn,70:$Vo,73:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,99:$Vy}),o($V61,[2,66]),o($V61,[2,67]),o($V61,[2,68]),o($V61,[2,69]),o($V61,[2,70]),o($V61,[2,73]),{64:203,65:[1,204]},{65:[2,60],105:$VB,122:$VC,123:$VD,124:$VE,125:$VF},o($VA,[2,25]),o([5,6,58,127,133,137,143,145,150,152,154],$Vo1,{159:205,33:$Vp1,182:$Vq1}),o($Vr1,[2,179]),o($Vr1,[2,181],{163:208,166:210,26:$Vs1,164:$Vt1,165:$Vu1,167:$Vv1,168:$Vw1,173:$Vx1,177:$Vy1}),{162:[1,216]},o($Vz1,[2,202]),o($Vz1,[2,203]),o([5,6,26,33,39,40,58,84,127,133,137,143,145,150,152,154,164,165,167,168,173,177,179,180,192,193,194],$Vo1,{159:217,61:$V71,182:$Vq1}),{4:218,7:$V0,40:$V81,56:$Vb1,60:144,83:$Vc1,158:219,160:139,161:140,172:143,174:142},o($VG,[2,141]),o($VA1,[2,142],{105:$VB,122:$VC}),o($VA1,[2,143],{105:$VB,122:$VC}),o($VG,[2,144]),o($VA1,[2,145],{105:$VB,122:$VC}),o($VA,[2,31]),o($VA,[2,32]),o($VA,[2,33]),{49:222,50:$Vk,51:$Vl,53:[1,221],120:220,121:[1,223]},o($VO,[2,128]),{56:[1,224]},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:95,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,98:94,99:$VR,104:$VS},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:102,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,98:101,99:$VR,104:$VS},{56:[2,123]},{56:[2,124]},{53:[1,225]},o($VO,[2,131]),{56:[1,226]},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:227},{53:[1,228]},o($VO,[2,134]),{56:[1,229]},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:230},{56:[1,231]},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:232},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:233,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:234},{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:235},o([5,6,24,26,33,39,40,58,65,66,68,71,84,88,99,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],[2,87],{85:118,35:$VT,73:$VU,75:$VV,86:$VW,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41}),o([5,6,24,26,33,39,40,58,65,66,68,71,84,88,89,96,99,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],[2,88],{85:118,35:$VT,73:$VU,75:$VV,86:$VW,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,97:$V41}),o($VB1,[2,89],{85:118,35:$VT,73:$VU,75:$VV,86:$VW,92:$V$,93:$V01,94:$V11,95:$V21,97:$V41}),o($VB1,[2,90],{85:118,35:$VT,73:$VU,75:$VV,86:$VW,92:$V$,93:$V01,94:$V11,95:$V21,97:$V41}),o($VC1,[2,91],{85:118,35:$VT,86:$VW,92:$V$,93:$V01,94:$V11,95:$V21,97:$V41}),o($VC1,[2,92],{85:118,35:$VT,86:$VW,92:$V$,93:$V01,94:$V11,95:$V21,97:$V41}),o($VD1,[2,93],{85:118,86:$VW,97:$V41}),o($VD1,[2,94],{85:118,86:$VW,97:$V41}),o($VD1,[2,95],{85:118,86:$VW,97:$V41}),o($VD1,[2,96],{85:118,86:$VW,97:$V41}),o($VD1,[2,97],{85:118,86:$VW,97:$V41}),o([5,6,24,26,33,39,40,58,65,66,68,71,84,88,96,99,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182],[2,98],{85:118,35:$VT,73:$VU,75:$VV,86:$VW,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,97:$V41}),o($V51,[2,99],{61:$V71}),o($V51,[2,100]),o($V51,[2,101]),o($V51,[2,85]),o([5,6,24,25,26,33,35,39,40,41,42,44,45,47,48,50,51,53,56,58,61,65,66,68,70,71,73,75,76,77,78,79,81,82,83,84,86,88,89,90,91,92,93,94,95,96,97,99,101,103,104,105,106,107,108,110,111,112,113,114,115,119,122,123,124,125,127,131,133,137,140,141,143,145,150,152,154,157,164,165,167,168,173,177,179,180,182,192,193,194],[2,56]),o($V61,[2,78]),{25:$Va,37:236,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o($V61,[2,80]),{33:$Vi1,58:[1,237]},{58:[1,238]},{84:[1,239],105:$VB,122:$VC,123:$VD,124:$VE,125:$VF},{33:[1,241],58:[1,240]},o($Vj1,[2,49]),o($Vj1,[2,51]),o($Vj1,[2,52]),{25:$Va,37:242,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o($Vj1,[2,54],{105:$VB,122:$VC,123:$VD,124:$VE,125:$VF}),{65:[1,244],67:243,68:[1,245],71:[2,63]},{25:$Va,37:246,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o($VE1,[2,148],{126:247,127:[1,248]}),{40:$V81,56:$Vb1,60:144,83:$Vc1,160:249,161:140,172:143,174:142},{56:[1,250]},{173:[1,251]},{40:$V81,56:$Vb1,60:144,174:252},{169:253,170:$VF1,173:$VG1},{166:256,167:$Vv1,168:$Vw1,171:255,173:[2,190]},{173:[2,184]},{173:[2,185]},o($VH1,[2,186]),o($VH1,[2,187]),{40:$V81,56:$Vb1,60:144,161:257,172:143,174:142},o($VI1,$VJ1,{183:258,60:260,39:$VK1,40:$V81}),{58:[1,261]},{33:$Vp1,58:[1,262]},o($VG,[2,139]),o($VO,[2,126]),o($VG,[2,136]),o($VG,[2,137]),{4:263,7:$V0},o($VO,[2,130]),{4:264,7:$V0},{35:$VT,73:$VU,75:$VV,85:118,86:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,105:[1,265]},o($VO,[2,133]),{4:266,7:$V0},{35:$VT,73:$VU,75:$VV,85:118,86:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,105:[1,267]},{4:268,7:$V0,25:$Va,37:123,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:269,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{35:$VT,73:$VU,75:$VV,85:118,86:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,105:[1,270]},o($VO,[2,105],{100:271,101:[1,272]}),o($VO,[2,115],{85:118,35:$VT,73:$VU,75:$VV,86:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41}),o($VO,[2,113],{85:118,35:$VT,73:$VU,75:$VV,86:$VW,88:$VX,89:$VY,90:$VZ,91:$V_,92:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41}),o($Vj1,[2,147],{105:$VB,122:$VC,123:$VD,124:$VE,125:$VF}),o($V61,[2,79]),o($V61,[2,81]),o($V61,[2,82]),o($V61,[2,47]),o($Vj1,$Vk1,{118:35,102:37,87:40,74:41,54:42,60:43,55:44,72:45,69:50,43:51,46:52,49:53,52:54,37:202,59:273,20:$Vl1,25:$Va,35:$Vm1,36:$Vn1,40:$Vd,41:$Ve,42:$Vf,44:$Vg,45:$Vh,47:$Vi,48:$Vj,50:$Vk,51:$Vl,53:$Vm,56:$Vn,70:$Vo,73:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,99:$Vy}),o($Vj1,[2,53],{105:$VB,122:$VC,123:$VD,124:$VE,125:$VF}),{71:[1,274]},{25:$Va,37:275,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{25:$Va,37:276,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{66:[1,277],105:$VB,122:$VC,123:$VD,124:$VE,125:$VF},o($VL1,[2,150],{128:278,129:279,133:[1,280]}),{25:$Va,37:281,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o($Vr1,[2,180]),{40:$V81,60:283,181:282},{40:$V81,56:$Vb1,60:144,174:284},{176:285,179:$VM1},{173:[1,287]},{173:[2,189]},{173:[1,288]},{169:289,170:$VF1,173:$VG1},{26:$Vs1,84:[1,290],163:208,164:$Vt1,165:$Vu1,166:210,167:$Vv1,168:$Vw1,173:$Vx1,177:$Vy1},o($Vz1,[2,219],{189:291,190:292,191:293,192:$VN1,193:$VO1,194:$VP1}),{40:$V81,60:297},o($VI1,[2,210],{61:$V71}),o($Vz1,$VJ1,{60:260,183:298,39:$VK1,40:$V81}),o($Vz1,[2,228]),{58:[1,299]},{58:[1,300]},{25:$Va,40:$Vd,41:$Ve1,42:$Vf1,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,102:301},{58:[1,302]},{25:$Va,40:$Vd,41:$Ve1,42:$Vf1,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,102:303},{58:[1,304]},{33:$Vi1,58:[1,305]},{25:$Va,40:$Vd,41:$Ve1,42:$Vf1,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,102:306},o($VO,[2,114]),{25:$Va,40:$Vd,41:$VP,42:$VQ,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:307,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx},o($Vj1,[2,48]),o($V61,[2,65]),{66:[1,308],105:$VB,122:$VC,123:$VD,124:$VE,125:$VF},{71:[2,64],105:$VB,122:$VC,123:$VD,124:$VE,125:$VF},{25:$Va,37:309,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o($VQ1,[2,164],{142:310,143:[1,311]}),o($VL1,[2,151]),{25:$Va,37:314,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35,134:312,138:313},o($VE1,[2,149],{105:$VB,122:$VC,123:$VD,124:$VE,125:$VF}),{33:[1,316],58:[1,315]},o($Vj1,[2,204],{61:$V71}),o([5,6,26,33,58,84,127,133,137,143,145,150,152,154,164,165,167,168,173,177,182],[2,192],{175:317,176:318,179:$VM1,180:$VR1}),o($Vz1,[2,194]),{25:$Va,37:320,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},{40:$V81,56:$Vb1,60:144,161:321,172:143,174:142},{40:$V81,56:$Vb1,60:144,174:322},{173:[2,191]},o($Vr1,[2,182]),o($Vz1,[2,226]),o($Vz1,[2,220]),o($Vz1,[2,221]),{184:324,185:$VS1,186:$VT1},{184:327,185:$VS1,186:$VT1},{184:328,185:$VS1,186:$VT1},o($VI1,[2,209],{61:$V71}),o($Vz1,[2,227]),o($VO,[2,129]),o($VO,[2,132]),o($VO,[2,110]),o($VO,[2,135]),o($VO,[2,111]),o($VO,[2,108]),o($VO,[2,109]),o($VO,[2,112]),o($VO,[2,106]),{25:$Va,37:329,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o($VU1,[2,61],{105:$VB,122:$VC,123:$VD,124:$VE,125:$VF}),o($VV1,[2,155],{135:330,136:331,137:[1,332]}),{25:$Va,37:333,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35},o($VL1,$VW1,{130:334,33:$VX1,131:$VY1}),o($VZ1,[2,158]),o($VZ1,[2,161],{139:337,105:$VB,122:$VC,123:$VD,124:$VE,125:$VF,140:[1,338],141:[1,339]}),o([5,6,26,33,39,40,58,84,127,133,137,143,145,150,152,154,164,165,167,168,173,177,179,180,182,192,193,194],[2,207]),{40:$V81,60:340},o($Vz1,[2,193]),o($Vz1,[2,200]),{56:[1,341]},o($Vz1,[2,199],{105:$VB,122:$VC,123:$VD,124:$VE,125:$VF}),{26:$Vs1,163:208,164:$Vt1,165:$Vu1,166:210,167:$Vv1,168:$Vw1,173:$Vx1,175:342,176:318,177:$Vy1,179:$VM1,180:$VR1},o($Vz1,[2,196]),{191:343,192:$VN1,193:$VO1,194:$VP1},{56:$V_1,152:$V$1,187:344},o($V02,[2,211]),o($V02,[2,212]),{56:$V_1,152:$V$1,187:346},{56:$V_1,152:$V$1,187:347},o($VU1,[2,62],{105:$VB,122:$VC,123:$VD,124:$VE,125:$VF}),o($V12,[2,169],{147:348,144:349,145:[1,350]}),o($VV1,[2,156]),{25:$Va,37:314,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35,134:351,138:313},o($VQ1,[2,165],{105:$VB,122:$VC,123:$VD,124:$VE,125:$VF}),o($VL1,[2,154]),{25:$Va,37:314,40:$Vd,41:$Ve,42:$Vf,43:51,44:$Vg,45:$Vh,46:52,47:$Vi,48:$Vj,49:53,50:$Vk,51:$Vl,52:54,53:$Vm,54:42,55:44,56:$Vn,60:43,69:50,70:$Vo,72:45,73:$Vp,74:41,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,87:40,99:$Vy,102:37,118:35,138:352},{132:[1,353]},o($VZ1,[2,160]),o($VZ1,[2,162]),o($VZ1,[2,163]),o($Vj1,[2,205],{61:$V71}),{40:$V81,60:355,62:354},o($Vz1,[2,195]),o($Vz1,[2,222]),{56:[1,356]},{133:[1,359],137:[1,358],173:[1,357]},{56:[1,360]},{56:[1,361]},o($V22,[2,171],{148:362,149:363,150:[1,364]}),o($V12,[2,170]),{25:[1,365]},o($VV1,$VW1,{130:366,33:$VX1,131:$VY1}),o($VZ1,[2,159]),o($VL1,[2,153]),{33:$V32,58:[1,367]},o($Vj1,[2,57],{61:$V71}),{40:$V81,58:[2,217],60:355,62:370,188:369},{56:[2,214]},{56:[2,215]},{56:[2,216]},{40:$V81,60:355,62:371},{40:$V81,60:355,62:372},o($Vz,[2,174],{151:373,152:[1,374],154:[1,375]}),o($V22,[2,172]),{40:[1,377],55:376},o($V12,[2,166],{33:[1,378],146:[1,379]}),o($VV1,[2,157]),o($Vz1,[2,201]),{40:$V81,60:380},{58:[1,381]},{33:$V32,58:[2,218]},{33:$V32,58:[1,382]},{33:$V32,58:[1,383]},o($Vz,[2,178]),{153:[1,384]},{103:[1,385]},o($V22,[2,173]),{56:$Va1},{25:[1,386]},{25:[1,387]},o($Vj1,[2,58],{61:$V71}),o($Vz1,[2,223]),o($Vz1,[2,224]),o($Vz1,[2,225]),o($Vz,[2,175]),{155:[1,388]},o($V12,[2,167]),o($V12,[2,168]),{156:[1,389]},o($Vz,[2,176])],
defaultActions: {4:[2,1],10:[2,2],159:[2,123],160:[2,124],212:[2,184],213:[2,185],254:[2,189],289:[2,191],357:[2,214],358:[2,215],359:[2,216]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 40
break;
case 5:return 40
break;
case 6:return 7
break;
case 7:return 19
break;
case 8:return 117
break;
case 9:return 20
break;
case 10:return 21
break;
case 11:return 22
break;
case 12:return 23
break;
case 13:return 26
break;
case 14:return 27
break;
case 15:return 28
break;
case 16:return 29
break;
case 17:return 30
break;
case 18:return 31
break;
case 19:return 32
break;
case 20:return 36
break;
case 21:return 39
break;
case 22:return 50
break;
case 23:return 51
break;
case 24:return 53
break;
case 25:return 'COLLATE'
break;
case 26:return 78
break;
case 27:return 81
break;
case 28:return 82
break;
case 29:return 70
break;
case 30:return 65
break;
case 31:return 66
break;
case 32:return 68
break;
case 33:return 71
break;
case 34:return 93
break;
case 35:return 94
break;
case 36:return 99
break;
case 37:return 104
break;
case 38:return 103
break;
case 39:return 106
break;
case 40:return 107
break;
case 41:return 101
break;
case 42:return 108
break;
case 43:return 119
break;
case 44:return 121
break;
case 45:return 105
break;
case 46:return 124
break;
case 47:return 125
break;
case 48:return 157
break;
case 49:return 182
break;
case 50:return 192
break;
case 51:return 185
break;
case 52:return 186
break;
case 53:return 152
break;
case 54:return 173
break;
case 55:return 137
break;
case 56:return 133
break;
case 57:return 193
break;
case 58:return 194
break;
case 59:return 164
break;
case 60:return 165
break;
case 61:return 179
break;
case 62:return 180
break;
case 63:return 167
break;
case 64:return 168
break;
case 65:return 170
break;
case 66:return 177
break;
case 67:return 127
break;
case 68:return 140
break;
case 69:return 141
break;
case 70:return 131
break;
case 71:return 132
break;
case 72:return 143
break;
case 73:return 145
break;
case 74:return 146
break;
case 75:return 150
break;
case 76:return 153
break;
case 77:return 154
break;
case 78:return 155
break;
case 79:return 156
break;
case 80:return 162
break;
case 81:return 86
break;
case 82:return 41
break;
case 83:return 42
break;
case 84:return 79
break;
case 85:return 33
break;
case 86:return 24
break;
case 87:return 56
break;
case 88:return 58
break;
case 89:return 76
break;
case 90:return 115
break;
case 91:return 77
break;
case 92:return 88
break;
case 93:return 89
break;
case 94:return 90
break;
case 95:return 91
break;
case 96:return 73
break;
case 97:return 75
break;
case 98:return 35
break;
case 99:return 92
break;
case 100:return 95
break;
case 101:return 96
break;
case 102:return 110
break;
case 103:return '<=>'
break;
case 104:return 112
break;
case 105:return 111
break;
case 106:return 113
break;
case 107:return 114
break;
case 108:return 83
break;
case 109:return 84
break;
case 110:return 6
break;
case 111:return 97
break;
case 112:return 45
break;
case 113:return 45
break;
case 114:return 48
break;
case 115:return 25
break;
case 116:return 47
break;
case 117:return 40
break;
case 118:return 61
break;
case 119:return 44
break;
case 120:return 5
break;
case 121:return 'INVALID'
break;
}
},
rules: [/^(?:[\/][*](.|\n)*?[*][\/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:[\w]+[\u4e00-\u9fa5]+[0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:[\u4e00-\u9fa5][0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]+\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:IN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:INNER\b)/i,/^(?:CROSS\b)/i,/^(?:ON\b)/i,/^(?:USING\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:OUTER\b)/i,/^(?:NATURAL\b)/i,/^(?:WHERE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:WITH\b)/i,/^(?:ROLLUP\b)/i,/^(?:HAVING\b)/i,/^(?:LIMIT\b)/i,/^(?:OFFSET\b)/i,/^(?:PROCEDURE\b)/i,/^(?:UPDATE\b)/i,/^(?:LOCK\b)/i,/^(?:SHARE\b)/i,/^(?:MODE\b)/i,/^(?:OJ\b)/i,/^(?:AT\s+TIME\s+ZONE\b)/i,/^(?:DATE\b)/i,/^(?:TIMESTAMP\b)/i,/^(?:INTERVAL\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:<=>)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:<>)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:::)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*)/i,/^(?:\.)/i,/^(?:['"][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (!sqlParser) {
  sqlParser = {};
}

function Sql() {
  this.buffer = '';
}

sqlParser.stringify = function (ast) {
  var sql = new Sql();
  sql.travelMain(ast);
  return sql.buffer;
}

Sql.prototype.travel = function (ast) {
  if (!ast) return;

  if (typeof ast === 'string') {
    return this.append(ast);
  }

  var processor = this['travel' + ast.type];
  processor.call(this, ast);
}

var noSuffixFlag = false;
Sql.prototype.appendKeyword = function(keyword, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += keyword.toUpperCase();
  } else {
    this.buffer += ' ' + keyword.toUpperCase();
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
}
Sql.prototype.append = function(word, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += word;
  } else {
    this.buffer += ' ' + word;
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
}
Sql.prototype.travelMain = function(ast) {
  this.travelSelect(ast.value);
}
Sql.prototype.travelSelect = function(ast) {
  this.appendKeyword('select', true);
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  if (ast.highPriorityOpt) {
    this.appendKeyword(ast.highPriorityOpt);
  }
  if (ast.maxStateMentTimeOpt) {
    this.append('MAX_STATEMENT_TIME = ' + ast.maxStateMentTimeOpt);
  }
  if (ast.straightJoinOpt) {
    this.appendKeyword(ast.straightJoinOpt);
  }
  if (ast.sqlSmallResultOpt) {
    this.appendKeyword(ast.sqlSmallResultOpt);
  }
  if (ast.sqlBigResultOpt) {
    this.appendKeyword(ast.sqlBigResultOpt);
  }
  if (ast.sqlBufferResultOpt) {
    this.appendKeyword(ast.sqlBufferResultOpt);
  }
  if (ast.sqlCacheOpt) {
    this.appendKeyword(ast.sqlCacheOpt);
  }
  if (ast.sqlCalcFoundRowsOpt) {
    this.appendKeyword(ast.sqlCalcFoundRowsOpt);
  }
  if (ast.selectItems) {
    this.travelSelectExpr(ast.selectItems);
  }
  if (ast.from) {
    this.appendKeyword('from');
    this.travel(ast.from);
  }
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.where) {
    this.appendKeyword('where');
    this.travel(ast.where);
  }
  if (ast.groupBy) {
    this.travel(ast.groupBy);
  }
  if (ast.having) {
    this.travel(ast.having);
  }
  if (ast.orderBy) {
    this.travel(ast.orderBy);
  }
  if (ast.limit) {
    this.travel(ast.limit);
  }
  if (ast.procedure) {
    this.appendKeyword('procedure');
    this.travel(ast.procedure);
  }
  if (ast.updateLockMode) {
    this.appendKeyword(ast.updateLockMode);
  }
}
Sql.prototype.travelSelectExpr = function (ast) {
  var exprList = ast.value;
  for (var i = 0; i < exprList.length; i++) {
    if (typeof ast === 'string') {
      this.append(exprList[i]);
    } else {
      this.travel(exprList[i]);
      if (ast.alias) {
        if (ast.hasAs) {
          this.appendKeyword('as');
        }
        this.travel(ast.alias);
      }
    }
    if (i !== exprList.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelIsExpression = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('in');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.append(ast.right);
}
Sql.prototype.travelNotExpression = function (ast) {
  this.appendKeyword('not');
  this.travel(ast.value);
}
Sql.prototype.travelOrExpression =
Sql.prototype.travelAndExpression =
Sql.prototype.travelXORExpression = function (ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
}
Sql.prototype.travelNull = 
Sql.prototype.travelBoolean = 
Sql.prototype.travelBooleanExtra = function (ast) {
  this.appendKeyword(ast.value);
}
Sql.prototype.travelNumber = function (ast) {
  this.append(ast.value);
}
Sql.prototype.travelString = function (ast) {
  this.append(ast.value);
}
Sql.prototype.travelFunctionCall = function (ast) {
  this.append(ast.name);
  this.append('(', true, true);
  var params = ast.params;
  for (var i = 0; i < params.length; i++) {
    var param = params[i];
    this.travel(param);
    if (i !== params.length -1) {
      this.append(',', true);
    }
  }
  this.append(')', true);
}
Sql.prototype.travelFunctionCallParam = function (ast) {
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  this.travel(ast.value);
}
Sql.prototype.travelIdentifier = function (ast) {
  this.append(ast.value);
}
Sql.prototype.travelIdentifierList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length -1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelWhenThenList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.appendKeyword('when');
    this.travel(list[i].when);
    this.appendKeyword('then');
    this.travel(list[i].then);
  }
}
Sql.prototype.travelCaseWhen = function (ast) {
  this.appendKeyword('case');
  if (ast.caseExprOpt) {
    this.travel(ast.caseExprOpt);
  }
  this.travel(ast.whenThenList);
  if (ast.else) {
    this.appendKeyword('else');
    this.travel(ast.else);
  }
  this.appendKeyword('end');
}
Sql.prototype.travelPrefix = function (ast) {
  this.appendKeyword(ast.prefix);
  this.travel(ast.value);
}
Sql.prototype.travelSimpleExprParentheses = function (ast) {
  if (ast.hasRow) {
    this.appendKeyword('row');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
}
Sql.prototype.travelSubQuery = function (ast) {
  if (ast.hasExists) {
    this.appendKeyword('exists');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
  if (ast.alias) {
    if (ast.hasAs) {
      this.appendKeyword('as');
    }
    this.travel(ast.alias);
  }
}
Sql.prototype.travelIdentifierExpr = function (ast) {
  this.append('{');
  this.travel(ast.identifier);
  this.travel(ast.value);
  this.append('}');
}
Sql.prototype.travelBitExpression = function (ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
}
Sql.prototype.travelInSubQueryPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
}
Sql.prototype.travelInExpressionListPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
}
Sql.prototype.travelBetweenPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('between');
  this.travel(ast.right.left);
  this.appendKeyword('and');
  this.travel(ast.right.right);
}
Sql.prototype.travelSoundsLikePredicate = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('sounds');
  this.appendKeyword('like');
  this.travel(ast.right);
}
Sql.prototype.travelLikePredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('like');
  this.travel(ast.right);
  if (ast.escape) {
    this.appendKeyword('escape')
    this.travel(ast.escape);
  }
}
Sql.prototype.travelRegexpPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('regexp');
  this.travel(ast.right);
}
Sql.prototype.travelIsNullBooleanPrimary = function (ast) {
  this.travel(ast.value);
  this.appendKeyword('is');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('null');
}
Sql.prototype.travelComparisonBooleanPrimary = function (ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.travel(ast.right);
}
Sql.prototype.travelComparisonSubQueryBooleanPrimary = function (ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.appendKeyword(ast.subQueryOpt);
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
}
Sql.prototype.travelExpressionList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelGroupBy = function (ast) {
  this.appendKeyword('group by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelOrderBy = function (ast) {
  this.appendKeyword('order by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.rollUp) {
    this.appendKeyword('with rollup');
  }
}
Sql.prototype.travelGroupByOrderByItem = function (ast) {
  this.travel(ast.value);
  if (ast.sortOpt) {
    this.appendKeyword(ast.sortOpt);
  }
}
Sql.prototype.travelLimit = function (ast) {
  this.appendKeyword('limit');
  var list = ast.value;
  if (list.length === 1) {
    this.append(list[0]);
  } else if (list.length === 2) {
    if (ast.offsetMode) {
      this.append(list[1]);
      this.append('offset');
      this.append(list[0]);
    } else {
      this.append(list[0]);
      this.append(',', true);
      this.append(list[1]);
    }
  }
}
Sql.prototype.travelTableRefrences = function (ast) {
  var list = ast.value;
  if (ast.TableRefrences) {
    this.append('(', false, true);
  }
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.TableRefrences) {
    this.append(')');
  }
}
Sql.prototype.travelTableRefrence = function (ast) {
  if (ast.hasOj) {
    this.append('{');
    this.appendKeyword('oj');
    this.travel(ast.value);
    this.append('}');
  } else {
    this.travel(ast.value);
  }
}
Sql.prototype.travelInnerCrossJoinTable = function (ast) {
  this.travel(ast.left);
  if (ast.innerCrossOpt) {
    this.appendKeyword(ast.innerCrossOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  if (ast.condition) {
    this.travel(ast.condition);
  }
}
Sql.prototype.travelStraightJoinTable = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('straight_join');
  this.travel(ast.right);
  this.travel(ast.condition);
}
Sql.prototype.travelLeftRightJoinTable = function (ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.leftRight);
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  this.travel(ast.condition);
}
Sql.prototype.travelNaturalJoinTable = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('natural');
  if (ast.leftRight) {
    this.appendKeyword(ast.leftRight);
  }
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
}
Sql.prototype.travelOnJoinCondition = function (ast) {
  this.appendKeyword('on');
  this.travel(ast.value);
}
Sql.prototype.travelUsingJoinCondition = function (ast) {
  this.appendKeyword('using');
  this.appendKeyword('(', false, true);
  this.travel(ast.value);
  this.appendKeyword(')');
}
Sql.prototype.travelPartitions = function (ast) {
  this.appendKeyword('partition');
  this.appendKeyword('(', false, true);
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  this.appendKeyword(')');
}
Sql.prototype.travelForOptIndexHint = function (ast) {
  this.appendKeyword('for');
  this.appendKeyword(ast.value);
}
Sql.prototype.travelIndexList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelUseIndexHint = function (ast) {
  this.appendKeyword('use');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
}
Sql.prototype.travelIgnoreIndexHint = function (ast) {
  this.appendKeyword('ignore');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
}
Sql.prototype.travelForceIndexHint = function (ast) {
  this.appendKeyword('force');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
}
Sql.prototype.travelTableFactor = function (ast) {
  this.travel(ast.value);
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.alias) {
    if (ast.hasAs) {
      this.appendKeyword('as');
    }
    this.travel(ast.alias);
  }
  if (ast.indexHintOpt) {
    this.travel(ast.indexHintOpt);
  }
}
var root = this
// AMD / RequireJS
if (typeof define !== 'undefined' && define.amd) {
    define([], function () {
        return sqlParser;
    });
}
// Node.js
else if (typeof module !== 'undefined' && module.exports) {
    module.exports = sqlParser;
}
// included directly via <script> tag
else {
    root.sqlParser = sqlParser;
}
